# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  inputs:
    version: '3.1.101'

- task: DotNetCoreCLI@2
  displayName: Install ReportGenerator Global Tool
  inputs:
    command: custom
    custom: tool
    arguments: install dotnet-reportgenerator-globaltool -g

- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- script: dotnet test test/bitandbot.demo.test/bitandbot.demo.test.csproj --logger "trx;LogFileName=testresults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/Coverage/
  displayName: 'dotnet test'

- script: reportgenerator "-reports:$(Build.SourcesDirectory)/test/bitandbot.demo.test/TestResults/Coverage/coverage.cobertura.xml" "-targetDir:$(Build.SourcesDirectory)/test/bitandbot.demo.test/TestResults/Coverage/Reports" -tag:$(Build.BuildNumber) -reportTypes:htmlInline
  workingDirectory: $(Build.SourcesDirectory)/test/bitandbot.demo.test
  displayName: 'reportgenerator'

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: $(Build.SourcesDirectory)/test/bitandbot.demo.test/TestResults/Coverage/**/coverage.cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)/test/bitandbot.demo.test/TestResults/Coverage/Reports
    failIfCoverageEmpty: false 

# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
# https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish?tabs=netcore21
# https://docs.microsoft.com/en-us/dotnet/standard/frameworks
# publish release files to $(Build.BinariesDirectory) without zip to avoid double zip
- task: DotNetCoreCLI@2
  displayName: 'API: Publish .Net Core 3.1'
  inputs:
    command: 'publish'
    arguments: $(Build.SourcesDirectory)/src/bitandbot.demo.api/bitandbot.demo.api.csproj -f netcoreapp3.1 -r win-x86 --self-contained false -c $(buildConfiguration) -o $(Build.BinariesDirectory)
    publishWebProjects: false
    zipAfterPublish: false
    workingDirectory: '$(Build.SourcesDirectory)/src/bitandbot.demo.api'

# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-files?view=azure-devops&tabs=yaml
# http://man7.org/linux/man-pages/man3/fnmatch.3.html
# copy from output files (release) to staging directory where files will be placed into Azure pipeline for next step (RELEASE)
- task: CopyFiles@2
  displayName: 'API: Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)'
    contents: '**'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    
# drop artifact to Azure pipeline for next step (RELEASE)
- task: PublishBuildArtifacts@1
  displayName: 'API: Publish Artifact from: $(Build.ArtifactStagingDirectory)'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(Build.BuildNumber)$(Build.BuildId)'
    publishLocation: 'Container'

- task: DotNetCoreCLI@2
  displayName: 'Blazor: Publish .Net Core 3.1 with .Net Standard 2.1'
  inputs:
    command: 'publish'
    arguments: $(Build.SourcesDirectory)/src/bitandbot.demo.blazor/bitandbot.demo.blazor.csproj -f netstandard2.1 -c $(buildConfiguration) -o $(Build.BinariesDirectory)_blazor
    publishWebProjects: false
    zipAfterPublish: false
    workingDirectory: '$(Build.SourcesDirectory)/src/bitandbot.demo.blazor'

# To be included when using 3rd or custom Razor components 
#- task: CopyFiles@2
#  displayName: 'Blazor: Copy missing files in _content folder to: $(Build.BinariesDirectory)_blazor'
#  inputs:
#    SourceFolder: '$(Build.BinariesDirectory)_blazor/wwwroot/_content'
#    contents: '**'
#    targetFolder: '$(Build.BinariesDirectory)_blazor/bitandbot.demo.blazor/dist/_content'
#    cleanTargetFolder: false

- task: CopyFiles@2
  displayName: 'Blazor: Copy files in distribution folder to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)_blazor/bitandbot.demo.blazor/dist'
    contents: '**'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true

- task: PublishBuildArtifacts@1
  displayName: 'Blazor: Publish Artifact from: $(Build.ArtifactStagingDirectory)'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(Build.BuildNumber)$(Build.BuildId)_blazor'
    publishLocation: 'Container'